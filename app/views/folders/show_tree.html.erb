<script type="text/javascript">
var modified_users = 0;
var modified_groups = 0;
var modified_teams = 0;
</script>

<%
@groups_cache ||= {}
@group_obj_cache ||= {}
%>

<table id="tree_main" cellpadding="0" cellspacing="0" style="width:100%; background-color:#F9BF8B; border:solid 2px; border-top-color:#FBE2B1; border-left-color:#FBE2B1; border-bottom-color:dimgray; border-right-color:dimgray;">
<% if !@login_user.nil? and @login_user.admin?(User::AUTH_FOLDER) %>
  <tr>
    <td style="padding:5px 5px 2px; text-align:right;">
      <table style="width:100%;" cellspacing="0" cellpadding="0">
         <tr>
            <td style="text-align:left; background-color:white; border:solid 1px; border-bottom-color:#FBE2B1; border-right-color:#FBE2B1; border-top-color:dimgray; border-left-color:dimgray;">
            <% if @group_id.nil? or @group_id.empty? %>
              <div class="button_gray" style="width:110px;" onclick="showGroupTreeToSelect('0');">
                <%= t('btn.select_group') %>
              </div>
            <% else %>
              <table style="width:100%;" cellpadding="0" cellspacing="0">
                <tr>
                  <td nowrap style="text-indent:10px; text-align:left;">
                    <%= t('cap.group') %> <a href="#" onclick="showGroupTreeToSelect('<%= @group_id %>');" onMouseOver="this.style.backgroundColor='palegreen'" onMouseOut="this.style.backgroundColor='white'"><span style="color:red;"><%= Group.get_path(@group_id, @groups_cache, @group_obj_cache) %></span></a>
                    &nbsp; <img class="img_btn" src="<%= THETIS_RELATIVE_URL_ROOT %>/images/erase.gif" alt="<%= t('btn.clear') %>" title="<%= t('btn.clear') %>" onclick="clearGroup()" />
                  </td>
                </tr>
              </table>
            <% end %>
            </td>
        </tr>
      </table>
    </td>
  </tr>
<% end %>
  <tr>
    <td>
      <table style="width:100%;" cellspacing="0" cellpadding="0">
        <tr>
        <% if !@login_user.nil? %>
          <td nowrap style="padding:5px 20px; text-align:left;">
            <input type="button" value="<%= t('btn.new') %>" onclick="onCreateClicked(getPos(this));" style="width:80px;" />
            <input type="button" value="<%= t('btn.rename') %>" onclick="onRenameFolderClicked(getPos(this));" style="width:80px;" />
            <input type="button" value="<%= t('btn.delete') %>" onclick="doDelete();" style="width:80px;" />
            <input type="button" value="<%= t('btn.move') %>" onclick="onMoveFolderClicked();" style="width:80px;" />
          </td>
        <% else %>
          <td style="padding:5px 20px; text-align:left;">
            <%= t('folder.login_to_edit_tree') %>
          </td>
        <% end %>
          <td style="padding:5px 20px; text-align:right;">
        <% unless @login_user.nil? %>
            <%
            options = []
            options << [h(t('folder.opt.items_list')), 'items']
            options << [h(t('folder.opt.items_order')), 'items_order']
            options << [h(t('folder.opt.folders_order')), 'folders_order']
            options << [h(t('folder.opt.authorities')), 'auth']
            options << [h(t('folder.opt.display_control')), 'disp']
            %>
            <%= select_tag('select_opt', options_for_select(options, nil), :onChange => 'changeOption(this.value);', :style => 'width:200px; color:chocolate; font-weight:bold;') %>
        <% end %>
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr style="height:100%;">
    <td style="padding-bottom:7px; text-align:center;">

      <table cellspacing="0" cellpadding="0" style="background-color:white; width:100%;">
        <tr>
          <td id="td_tree" style="border:inset 2px silver; padding:0px; text-align:left; vertical-align:top;">
            <%= form_tag( {:controller => 'folders', :action => 'show_tree'}, :method => 'post', :name => 'form_folder_tree') %>
              <div id="divFolderTree" style="overflow:auto;"><div id="folderTree" style="text-align:left; margin:10px;"></div></div>
              <input type="hidden" name="selKeeper" id="selKeeper" value="" />
            </form>
          </td>
          <td id="drag_border" style="width:5px; background-color:#F9BF8B; cursor:w-resize; vertical-align:middle;">
            <img src="<%= THETIS_RELATIVE_URL_ROOT %>/images/grip_vertical.png">
          </td>
          <td id="td_view" style="width:63%; border:inset 2px silver; text-align:center; vertical-align:top;">
            <div id="div_view" style="overflow:auto; width:100%;">&nbsp;</div>
          </td>
        </tr>
      </table>

    </td>
  </tr>
</table>

<%
@folder_tree.each do |parent_id, child_folders|
  child_folders.each do |folder|
    folder_xtype = folder.xtype

    # >>>  Only for ver.0.9.1
    if folder_xtype == Folder::XTYPE_USER
      begin
        user = User.find(folder.owner_id)
      rescue
      end
      folder_xtype = '' if user.nil?
    end
    # <<<
    # >>>  To make sure
    if folder_xtype == Folder::XTYPE_GROUP
      begin
        group = Group.find(folder.owner_id)
      rescue
      end
      folder_xtype = '' if group.nil?
    end
    if folder_xtype == Folder::XTYPE_TEAM
      begin
        team = Team.find(folder.owner_id)
      rescue
      end
      folder_xtype = '' if team.nil?
    end
    # <<<
%>
  <span id="xtype_<%= folder.id %>" style="display:none;"><%= folder_xtype %></span>
<%
  end
end
%>
  <span id="xtype_0" style="display:none;"></span>


  <script type="text/javascript">
  //<![CDATA[
  new Draggable("drag_border", {revert:false, constraint:"horizontal"})
  //]]>
  </script>

<script type="text/javascript">

var BorderDragObserver = Class.create();
BorderDragObserver.prototype = {
  initialize: function() {
  },
  onStart: function(eventName, draggable, event) {
    if (draggable.element.id != "drag_border") {
      return;
    }
    if (getUserAgentName() == "gecko") {
      var divFolderTree = _z("divFolderTree");
      var td_tree = _z("td_tree");
      var view = _z("div_view");
      var td_view = _z("td_view");
      var orgWidthFolderTree = divFolderTree.offsetWidth;
      var orgWidthView = view.offsetWidth;

      draggable.options.snap = function(x, y) {
        return onBorderDragged(x, y, divFolderTree, td_tree, view, td_view, orgWidthFolderTree, orgWidthView);
      };
    }
  },
  onDrag: function(eventName, draggable, event) {
    if (draggable.element.id != "drag_border") {
      return;
    }
    if (getUserAgentName() != "gecko") {
      var divFolderTree = _z("divFolderTree");
      var td_tree = _z("td_tree");
      var view = _z("div_view");
      var td_view = _z("td_view");
      var orgWidthFolderTree = divFolderTree.offsetWidth;
      var orgWidthView = view.offsetWidth;

      draggable.options.snap = function(x, y) {
        return onBorderDragged(x, y, divFolderTree, td_tree, view, td_view, orgWidthFolderTree, orgWidthView);
      };
    }
  },
  onEnd: function(eventName, draggable, event) {
    if (draggable.element.id != "drag_border") {
      return;
    }
    if (getUserAgentName() == "gecko") {
      draggable.options.snap = false;
    }
  }
}
Draggables.addObserver( new BorderDragObserver() );

function onBorderDragged(x, y, divFolderTree, td_tree, view, td_view, orgWidthFolderTree, orgWidthView)
{
  var leftWidth = orgWidthFolderTree + x;
  var rightWidth = orgWidthView - x;
  if (leftWidth < 100 && x < 0) {
    return [100-orgWidthFolderTree, y];
  } else if (rightWidth < 100 && x > 0) {
    return [orgWidthView-100, y];
  }
  divFolderTree.style.width = leftWidth + "px";
  td_tree.style.width = leftWidth + "px";
  td_view.style.width = "auto";
  view.style.width = rightWidth + "px";
  return [x, y];
}

function onLoadSub()
{
  var array = new Array(new Array("0", " (root)", "", "selectFolder('0');", 0));
  var folderImgs = new Array(
                      <% icons = Folder.get_icons(nil, false, false) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>"),
                      <% icons = Folder.get_icons(Folder::XTYPE_USER, false, false) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>"),
                      <% icons = Folder.get_icons(Folder::XTYPE_GROUP, false, false) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>"),
                      <% icons = Folder.get_icons(Folder::XTYPE_TEAM, false, false) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>"),
                      <% icons = Folder.get_icons(Folder::XTYPE_SYSTEM, false, false) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>"),
                      <% icons = Folder.get_icons(nil, true, false) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>"),
                      <% icons = Folder.get_icons(nil, false, true) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>"),
                      <% icons = Folder.get_icons(nil, true, true) %>
                        new Array("<%= icons[1] %>", "<%= icons[2] %>")
                      );
  var firstMenuId = ThetisBox.buildTree("", array, null, "folderTree", "selKeeper", folderImgs);
  <% @folder_tree.each do |parent_id, child_folders| %>
  array = new Array(
    <%
    child_folders.each_with_index do |folder, idx|

      case folder.xtype
        when Folder::XTYPE_USER
          img_idx = 1
        when Folder::XTYPE_GROUP
          img_idx = 2
        when Folder::XTYPE_TEAM
          img_idx = 3
        when Folder::XTYPE_SYSTEM
          img_idx = 4
        else
          if folder.bbs_top?
            if folder.locked?
              img_idx = 7
            else
              img_idx = 6
            end
          else
            if folder.locked?
              img_idx = 5
            else
              img_idx = 0
            end
          end
      end

      folder_name = folder.name
      if !@login_user.nil? and @login_user.admin?(User::AUTH_FOLDER)
        if folder.xtype == Folder::XTYPE_USER
          folder_name = folder.name + ' : ' + User.get_name(folder.owner_id)
        elsif folder.xtype == Folder::XTYPE_GROUP
          folder_name = Group.get_path(folder.owner_id, @groups_cache, @group_obj_cache)
        end
      end
    %>
    new Array("<%= folder.id %>", " <%= folder_name %>", "", "selectFolder('<%= folder.id %>');", <%= img_idx %>)
    <%
      if idx < (child_folders.length - 1)
    %>
    ,
    <%
      end
    end
    %>
        );
  ThetisBox.buildTree("<%= parent_id %>", array, null, "folderTree", "selKeeper", folderImgs, false);
  <% end %>

<% unless session[:folder_id].nil? or session[:folder_id].empty? %>
  var menuId = "a_folderTree:<%= session[:folder_id] %>";
  ThetisBox.selectTree("selKeeper", menuId, null, true);
  if (ThetisBox.isSelectedTree("selKeeper", menuId)) {
    doGetItems(<%= session[:folder_id] %>);
  }
<% end %>
}

function checkName(val)
{
  var val = trim(val, false);

  if (val.charAt(0) == '$') {
    msg("<%= t('folder.reserved_name') %>");
    return false;
  }
  if (val.indexOf('/') >= 0) {
    msg("<%= t('folder.reserved_char') %>");
    return false;
  }
  return true;
}

function checkSystemFolder(folder_id)
{
  var xtype = _z("xtype_"+folder_id).innerHTML;

  if (xtype == "<%= Folder::XTYPE_SYSTEM %>") {
    msg("<%= t('folder.blocked_by_system') %>");
    return false;
  }
  return true;
}

function checkMyFolder(folder_id)
{
  var xtype = _z("xtype_"+folder_id).innerHTML;

  if (xtype == "<%= Folder::XTYPE_USER %>") {
    msg("<%= t('folder.my_folder_restricted') %>");
    return false;
  }
  return true;
}

function checkGroupFolder(folder_id)
{
  var xtype = _z("xtype_"+folder_id).innerHTML;

  if (xtype == "<%= Folder::XTYPE_GROUP %>") {
    msg("<%= t('folder.group_folder_restricted') %>");
    return false;
  }
  return true;
}

function checkTeamFolder(folder_id)
{
  var xtype = _z("xtype_"+folder_id).innerHTML;

  if (xtype == "<%= Folder::XTYPE_TEAM %>") {
    msg("<%= t('folder.team_folder_restricted') %>");
    return false;
  }
  return true;
}

function onCreateClicked(pos)
{
  if (document.form_folder_tree.selKeeper.value == "") {
    msg("<%= t('folder.select_parent') %>");
    return;
  }
  var folder_id = document.form_folder_tree.selKeeper.value.split(":")[1];

  if (!checkSystemFolder(folder_id)) {
    return;
  }

  ThetisBox.openTree("folderTree:"+folder_id, true);

  var thetisBox = new ThetisBox;
  thetisBox.setFormTag("<form action=\"\" method=\"post\" onsubmit=\"doCreate(this, '"+folder_id+"'); return false;\">");
  thetisBox.setAdditionalParams(new Array("selectedFolderId="+folder_id, "authenticity_token=<%= form_authenticity_token %>"));
  thetisBox.show((pos.x)+","+(pos.y+25), "", "INPUT", "", "<%= t('folder.specify_name') %>", "");
}

function doCreate(frm, folder_id)
{
  if (!checkName(frm.thetisBoxEdit.value)) {
    return false;
  }

  var thetisBoxProgress = prog("TOP-RIGHT");

  new Ajax.Updater(
      "folderTree:"+folder_id,
      "<%= url_for(:controller => 'folders', :action => 'create') %>",
      {
        method:"post",
        parameters:Form.serialize(frm),
        asynchronous:true,
        evalScripts:true,
        insertion:Insertion.Bottom,
        onComplete:function(request) {
          thetisBoxProgress.remove();
        }
      }
    );
}

function doRenameFolder(frm, folder_id)
{
  if (!checkName(frm.thetisBoxEdit.value)) {
    return false;
  }

  var thetisBoxProgress = prog("TOP-RIGHT");

  var addParams = new Array();
  addParams.push(Form.serialize(frm));
  addParams.push("id="+folder_id);

  new Ajax.Updater(
      "a_folderTree:"+folder_id,
      "<%= url_for(:controller => 'folders', :action => 'rename') %>",
      {
        parameters:addParams.join("&"),
        asynchronous:true,
        evalScripts:true,
        onComplete:function(request) {
          thetisBoxProgress.remove();
        }
      }
    );
  return true;
}

function onRenameFolderClicked(pos)
{
  if (document.form_folder_tree.selKeeper.value == '') {
    msg("<%= t('folder.select') %>");
    return;
  }
  var folder_id = document.form_folder_tree.selKeeper.value.split(":")[1];

  if (folder_id == "0") {
    msg("<%= t('folder.root_folder_restricted') %>");
    return;
  }

  if (!checkSystemFolder(folder_id)
      || !checkGroupFolder(folder_id)) {
    return;
  }

  ThetisBox.openTree("folderTree:"+folder_id, true);

  var thetisBox = new ThetisBox;
  thetisBox.setFormTag("<form action=\"\" method=\"post\" onsubmit=\"doRenameFolder(this, "+folder_id+"); return false;\">");
  thetisBox.setAdditionalParams(new Array("selectedFolderId="+folder_id, "authenticity_token=<%= form_authenticity_token %>"));
  var name = trim(_z("folderTree:"+folder_id+"_name").innerHTML);
  thetisBox.show((pos.x)+","+(pos.y+25), "", "INPUT", "", "<%= t('folder.specify_name') %>", name);
}

function doDelete()
{
  if (document.form_folder_tree.selKeeper.value == '') {
    msg("<%= t('folder.select') %>");
    return;
  }
  var folder_id = document.form_folder_tree.selKeeper.value.split(':')[1]; 

  if (folder_id == "0") {
    msg("<%= t('folder.root_folder_restricted') %>");
    return;
  }

  if (!checkSystemFolder(folder_id)
      || !checkMyFolder(folder_id)
      || !checkGroupFolder(folder_id)
      || !checkTeamFolder(folder_id)) {
    return;
  }

  ThetisBox.openTree("folderTree:"+folder_id, true);

  var name = trim(_z("folderTree:"+folder_id+"_name").innerHTML);
  confm("<%= t('paren.square.left') %>"+name+"<%= t('msg.confirm_to_delete') %>", "_doDelete("+folder_id+")");
}

function _doDelete(folder_id)
{
  var thetisBox = prog("TOP-RIGHT");
  new Ajax.Request(
              "<%= url_for(:controller => 'folders', :action => 'destroy') %>?id="+folder_id,
              {
                asynchronous:true,
                evalScripts:true,
                onComplete:function(request){
                  thetisBox.remove();
                  if (request.responseText == "") {
                    removeElem(_z("base_folderTree:"+folder_id));
                    document.form_folder_tree.selKeeper.value = "";
                  }
                  request.responseText.evalScripts();
                },
                parameters:Form.serialize(document.form_folder_tree)+"&authenticity_token=<%= form_authenticity_token %>"
              }
            );
}

function onMoveFolderClicked()
{
  if (document.form_folder_tree.selKeeper.value == "") {
    msg("<%= t('folder.select') %>");
    return;
  }
  var folder_id = document.form_folder_tree.selKeeper.value.split(":")[1];

  if (folder_id == "0") {
    msg("<%= t('folder.root_folder_restricted') %>");
    return;
  }

  if (!checkSystemFolder(folder_id)
      || !checkMyFolder(folder_id)
      || !checkGroupFolder(folder_id)
      || !checkTeamFolder(folder_id)) {
    return;
  }

  ThetisBox.openTree("folderTree:"+folder_id, true);

  var addParams = new Array();
  addParams.push("id="+folder_id);
  addParams.push("authenticity_token=<%= form_authenticity_token %>");

  var thetisBox = new ThetisBox;
  thetisBox.setAdditionalParams(addParams);
  thetisBox.setFormTag("<form action=\"\" method=\"post\" onsubmit=\"doMoveFolder(this); return false;\">");
  thetisBox.show("CENTER", "", "TREE", "", "<%= t('folder.select_dest')%>", "");
  thetisBox.setTree("<%= url_for(:controller => 'folders', :action => 'ajax_get_tree') %>?id="+folder_id, "0");
}

function doMoveFolder(frmTree)
{
  prog("TOP-RIGHT");

  frmTree.method = "post";
  frmTree.action = "<%= url_for(:controller => 'folders', :action => 'move') %>";
  frmTree.submit();
}

function selectFolder(folder_id)
{
  var select_opt = _z("select_opt");

  if (select_opt == null) {
    doGetItems(folder_id);
  } else {
    switch (_z("select_opt").value)
    {
      case "items": doGetItems(folder_id); break;
      case "items_order": doGetItemsOrder(folder_id); break;
      case "folders_order": doGetFoldersOrder(folder_id); break;
      case "auth": doGetAuth(folder_id); break;
      case "disp": doGetDispCtrl(folder_id); break;
    }
  }
}

function changeOption(val)
{
  var folder_id = document.form_folder_tree.selKeeper.value.split(':')[1];
  if (!folder_id) {
    return false;
  }

  switch (val) {
    case "items": doGetItems(folder_id); break;
    case "items_order": doGetItemsOrder(folder_id); break;
    case "folders_order": doGetFoldersOrder(folder_id); break;
    case "auth": doGetAuth(folder_id); break;
    case "disp": doGetDispCtrl(folder_id); break;
  }
}

function doGetItems(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_items') %>", addParams);
}

function doGetItemsOrder(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_items_order') %>", addParams);
}

function doGetFoldersOrder(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);
<% unless @group_id.nil? %>
  addParams.push("group_id=<%= @group_id %>");
<% end %>

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_folders_order') %>", addParams);
}

function doGetAuth(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_users') %>", addParams);
}

function doGetDispCtrl(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_disp_ctrl') %>", addParams);
}

function getApplyFunc(folder_id)
{
  var applyFunc = null;
  if (modified_users > 0) {
    modified_users = 0;
    applyFunc = "doApplyAuthUsers("+folder_id+")";
  } else if (modified_groups > 0) {
    modified_groups = 0;
    applyFunc = "doApplyAuthGroups("+folder_id+")";
  } else if (modified_teams > 0) {
    modified_teams = 0;
    applyFunc = "doApplyAuthTeams("+folder_id+")";
  }
  return applyFunc;
}

function selectTabUsers(folder_id)
{
  var applyFunc = getApplyFunc(folder_id);
  if (applyFunc != null) {
    confm("<%= t('msg.confirm_to_save_change') %>", applyFunc, "_selectTabUsers("+folder_id+")", "<%= t('btn.btn_yes') %>", "<%= t('btn.btn_no') %>");
  } else{
    _selectTabUsers(folder_id);
  }
}

function _selectTabUsers(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_users') %>", addParams);
}

function doApplyAuthUsers(folder_id)
{
  selectListAll(_z("users_auth"));

  var addParams = new Array();
  addParams.push("id=" + folder_id);
  addParams.push(Form.serialize(document.form_folder_auth));

  doUpdateView("post", "<%= url_for(:controller => 'folders', :action => 'set_auth_users') %>", addParams);
}

function selectTabGroups(folder_id)
{
  var applyFunc = getApplyFunc(folder_id);
  if (applyFunc != null) {
    confm("<%= t('msg.confirm_to_save_change') %>", applyFunc, "_selectTabGroups("+folder_id+")", "<%= t('btn.btn_yes') %>", "<%= t('btn.btn_no') %>");
  } else{
    _selectTabGroups(folder_id);
  }
}

function _selectTabGroups(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_groups') %>", addParams);
}

function doApplyAuthGroups(folder_id)
{
  selectListAll(_z("groups_auth"));

  var addParams = new Array();
  addParams.push("id=" + folder_id);
  addParams.push(Form.serialize(document.form_folder_auth));

  doUpdateView("post", "<%= url_for(:controller => 'folders', :action => 'set_auth_groups') %>", addParams);
}

function selectTabTeams(folder_id)
{
  var applyFunc = getApplyFunc(folder_id);
  if (applyFunc != null) {
    confm("<%= t('msg.confirm_to_save_change') %>", applyFunc, "_selectTabTeams("+folder_id+")", "<%= t('btn.btn_yes') %>", "<%= t('btn.btn_no') %>");
  } else{
    _selectTabTeams(folder_id);
  }
}

function _selectTabTeams(folder_id)
{
  var addParams = new Array();
  addParams.push("id=" + folder_id);

  doUpdateView("get", "<%= url_for(:controller => 'folders', :action => 'get_auth_teams') %>", addParams);
}

function doApplyAuthTeams(folder_id)
{
  selectListAll(_z("teams_auth"));

  var addParams = new Array();
  addParams.push("id=" + folder_id);
  addParams.push(Form.serialize(document.form_folder_auth));

  doUpdateView("post", "<%= url_for(:controller => 'folders', :action => 'set_auth_teams') %>", addParams);
}

function showGroupTreeToSelect(group_id)
{
  var thetisBox = new ThetisBox;
  thetisBox.progress = true;
  thetisBox.setAdditionalParams(new Array("authenticity_token=<%= form_authenticity_token %>"));
  thetisBox.show("CENTER", "", "TREE", "<%= url_for(:controller => 'folders', :action => 'show_tree') %>", "<%= t('group.select_to_show')%>", "");
  thetisBox.setTree("<%= url_for(:controller => 'groups', :action => 'ajax_get_tree') %>", group_id);
}

function clearGroup()
{
  prog("TOP-RIGHT");
  location.href = "<%= url_for(:controller => 'folders', :action => 'show_tree') %>";
}

</script>
