
<%= render(:partial => 'common/dojo_init') %>

<table id="tree_main" cellpadding="0" cellspacing="0" style="width:100%; background-color:burlywood; border:solid 2px; border-top-color:palegoldenrod; border-left-color:palegoldenrod; border-bottom-color:dimgray; border-right-color:dimgray;" cellspacing="10">
  <tr>
    <td>
      <table style="width:100%;" cellspacing="0" cellpadding="0">
        <tr>
          <td nowrap style="padding:5px 20px; text-align:left;">
          <% if @login_user.admin?(User::AUTH_GROUP) %>
            <input type="button" value="<%= t('btn.new') %>" onclick="doCreate(getPos(this));" style="width:80px;" />
            <input type="button" value="<%= t('btn.rename') %>" onclick="doRename(getPos(this));" style="width:80px;" />
            <input type="button" value="<%= t('btn.delete') %>" onclick="doDelete();" style="width:80px;" />
            <input type="button" value="<%= t('btn.move') %>" onclick="doMove();" style="width:80px;"/>
          <% else %>
            <%= t('group.only_admin_can_edit_tree') %>
          <% end %>
          </td>
          <td style="padding:5px 20px; text-align:right;">
            <%
            options = []
            options << [h(User.model_name.human), 'user']
            options << [t('group.opt.subgroups_order'), 'groups_order']
            options << [h(OfficialTitle.model_name.human), 'official_title']
            options << [h(Workflow.model_name.human), 'workflow']
            options << [h(OfficeMap.model_name.human), 'office_map']
            %>
            <%= select_tag('select_opt', options_for_select(options, session[:group_option]), :onChange => 'changeOption(this.value);', :style => 'width:200px; color:chocolate; font-weight:bold;') %>
          </td>
        </tr>
      </table>
    </td>
  </tr>
  <tr style="height:100%;">
    <td style="padding-bottom:7px; text-align:center;">

      <table cellspacing="0" cellpadding="0" style="background-color:white; width:100%;">
        <tr>
          <td id="td_tree" style="text-align:left; vertical-align:top; border:inset 2px silver; padding:0px;">
            <%= form_tag( {:controller => 'groups', :action => 'show_tree'}, :method => 'post', :name => 'form_group_tree') %>
              <div id="divGroupTree" style="overflow:auto;"><div id="groupTree" style="text-align:left; margin:10px;"></div></div>
              <input type="hidden" name="selKeeper" id="selKeeper" value="" />
            </form>
          </td>
          <td id="drag_border" style="width:5px; background-color:burlywood; cursor:w-resize; vertical-align:middle;">
            <img src="<%= THETIS_RELATIVE_URL_ROOT %>/images/grip_vertical.png">
          </td>
          <td id="td_view" style="width:63%; border:inset 2px silver; text-align:center; vertical-align:top;">
            <div id="div_view" style="width:100%; overflow:auto;">&nbsp;</div>
          </td>
        </tr>
      </table>

    </td>
  </tr>
</table>

<script type="text/javascript">
//<![CDATA[
new Draggable("drag_border", {revert:false, constraint:"horizontal"})
//]]>
</script>

<script type="text/javascript">

var BorderDragObserver = Class.create();
BorderDragObserver.prototype = {
  initialize: function() {
  },
  onStart: function(eventName, draggable, event) {
    if (draggable.element.id != "drag_border") {
      return;
    }
    if (getUserAgentName() == "gecko") {
      var divGroupTree = _z("divGroupTree");
      var td_tree = _z("td_tree");
      var view = _z("div_view");
      var td_view = _z("td_view");
      var orgWidthGroupTree = divGroupTree.offsetWidth;
      var orgWidthView = view.offsetWidth;

      draggable.options.snap = function(x, y) {
        return onBorderDragged(x, y, divGroupTree, td_tree, view, td_view, orgWidthGroupTree, orgWidthView);
      };
    }
  },
  onDrag: function(eventName, draggable, event) {
    if (draggable.element.id != "drag_border") {
      return;
    }
    if (getUserAgentName() != "gecko") {
      var divGroupTree = _z("divGroupTree");
      var td_tree = _z("td_tree");
      var view = _z("div_view");
      var td_view = _z("td_view");
      var orgWidthGroupTree = divGroupTree.offsetWidth;
      var orgWidthView = view.offsetWidth;

      draggable.options.snap = function(x, y) {
        return onBorderDragged(x, y, divGroupTree, td_tree, view, td_view, orgWidthGroupTree, orgWidthView);
      };
    }
  },
  onEnd: function(eventName, draggable, event) {
    if (draggable.element.id != "drag_border") {
      return;
    }
    if (getUserAgentName() == "gecko") {
      draggable.options.snap = false;
    }
  }
}
Draggables.addObserver( new BorderDragObserver() );

function onBorderDragged(x, y, divGroupTree, td_tree, view, td_view, orgWidthGroupTree, orgWidthView)
{
  var leftWidth = orgWidthGroupTree + x;
  var rightWidth = orgWidthView - x;
  if (leftWidth < 100 && x < 0) {
    return [100-orgWidthGroupTree, y];
  } else if (rightWidth < 100 && x > 0) {
    return [orgWidthView-100, y];
  }
  divGroupTree.style.width = leftWidth + "px";
  td_tree.style.width = leftWidth + "px";
  view.style.width = rightWidth + "px";
  td_view.style.width = rightWidth + "px";
  return [x, y];
}

function onLoadSub()
{
  <%
  group_folder_open = THETIS_RELATIVE_URL_ROOT + '/images/folder/group_folder_open.gif'
  group_folder_close = THETIS_RELATIVE_URL_ROOT + '/images/folder/group_folder_close.gif'
  %>
  var folderImgs = new Array(
                        new Array("<%= group_folder_open %>", "<%= group_folder_close %>")
                      );
  var array = new Array(new Array("0", "/(root)", "", "selectGroup('0');", 0));
  var firstMenuId = ThetisBox.buildTree("", array, null, "groupTree", "selKeeper", folderImgs);
  <% @group_tree.each do |parent_id, child_groups| %>
  array = new Array(
    <% child_groups.each_with_index do |group, idx| %>
        new Array("<%= group.id %>", "/<%= group.name %>", "", "selectGroup('<%= group.id %>');", 0)
      <% if idx < (child_groups.length - 1) %>
        ,
    <%
      end
    end
    %>
      );
  ThetisBox.buildTree("<%= parent_id %>", array, null, "groupTree", "selKeeper", folderImgs, false);
  <% end %>

<% unless session[:group_id].nil? or session[:group_id].empty? %>
  var menuId = "a_groupTree:<%= session[:group_id] %>";
  ThetisBox.selectTree("selKeeper", menuId, null, true);
  if (ThetisBox.isSelectedTree("selKeeper", menuId)) {
    selectGroup(<%= session[:group_id] %>);
  }
<% end %>
}

function doCreate(pos)
{
  if (document.form_group_tree.selKeeper.value == "") {
    msg("<%= t('group.select_parent') %>");
    return;
  }
  var group_id = document.form_group_tree.selKeeper.value.split(":")[1];

  ThetisBox.openTree("groupTree:"+group_id, true);

  var thetisBox = new ThetisBox;
  thetisBox.progress = true;
  thetisBox.setFormTag("<form action=\"<%= url_for(:controller => 'groups', :action => 'create') %>\" method=\"post\" onsubmit=\"new Ajax.Updater('groupTree:"+group_id+"', '<%= url_for(:controller => 'groups', :action => 'create') %>', {asynchronous:true, evalScripts:true, insertion:Insertion.Bottom, onComplete:function(request){__thetisBoxProgress.remove();}, parameters:Form.serialize(this)}); return false;\">");
  thetisBox.setAdditionalParams(new Array("selectedGroupId="+group_id, "authenticity_token=<%= form_authenticity_token %>"));
  thetisBox.show((pos.x)+","+(pos.y+25), "", "INPUT", "", "<%= t('group.specify_name') %>", "");
}

function doRename(pos)
{
  if (document.form_group_tree.selKeeper.value == "") {
    msg("<%= t('group.select') %>");
    return;
  }
  var group_id = document.form_group_tree.selKeeper.value.split(":")[1];

  if (group_id == "0") {
    msg("<%= t('group.root_group_restricted') %>");
    return;
  }

  ThetisBox.openTree("groupTree:"+group_id, true);

  var thetisBox = new ThetisBox;
  thetisBox.progress = true;
  thetisBox.setFormTag("<form action=\"<%= url_for(:controller => 'groups', :action => 'rename') %>?id="+group_id+"\" method=\"post\" onsubmit=\"new Ajax.Updater('a_groupTree:"+group_id+"', '<%= url_for(:controller => 'groups', :action => 'rename') %>?id="+group_id+"', {asynchronous:true, evalScripts:true, onComplete:function(request){__thetisBoxProgress.remove();}, parameters:Form.serialize(this)}); return false;\">");
  thetisBox.setAdditionalParams(new Array('selectedGroupId='+group_id, "authenticity_token=<%= form_authenticity_token %>"));
  var name = trim(_z("groupTree:"+group_id+"_name").innerHTML.replace("/", ""));
  thetisBox.show((pos.x)+","+(pos.y+25), "", "INPUT", "", "<%= t('group.specify_name') %>", name);
}

function doDelete()
{
  if (document.form_group_tree.selKeeper.value == "") {
    msg("<%= t('group.select') %>");
    return;
  }
  var group_id = document.form_group_tree.selKeeper.value.split(":")[1]; 

  if (group_id == "0") {
    msg("<%= t('group.root_group_restricted') %>");
    return;
  }

  ThetisBox.openTree("groupTree:"+group_id, true);

  var name = trim(_z("groupTree:"+group_id+"_name").innerHTML.replace("/", ""));
  confm("<div style='padding-bottom:10px;'><%= t('paren.square.left') %>"+name+"<%= t('group.delete_info1') %></div><div style='padding-bottom:10px;'><%= t('group.delete_info2') %></div><%= t('msg.confirm_sure') %>", "_doDelete("+group_id+")");
}

function _doDelete(group_id)
{
  var thetisBox = prog("TOP-RIGHT");
  new Ajax.Updater(
          "base_groupTree:"+group_id,
          "<%= url_for(:controller => 'groups', :action => 'destroy') %>?id="+group_id,
          {
            asynchronous:true,
            evalScripts:true,
            onComplete:function(request){
              thetisBox.remove();
              removeElem(_z("base_groupTree:"+group_id));
              document.form_group_tree.selKeeper.value = "";
            },
            parameters:Form.serialize(document.form_group_tree)+"&authenticity_token=<%= form_authenticity_token %>"
          }
        );
}

function doMove()
{
  if (document.form_group_tree.selKeeper.value == "") {
    msg("<%= t('group.select') %>");
    return;
  }
  var group_id = document.form_group_tree.selKeeper.value.split(":")[1];

  if (group_id == "0") {
    msg("<%= t('group.root_group_restricted') %>");
    return;
  }

  ThetisBox.openTree("groupTree:"+group_id, true);

  var thetisBox = new ThetisBox;
  thetisBox.progress = true;
  thetisBox.setAdditionalParams(new Array("id="+group_id, "authenticity_token=<%= form_authenticity_token %>"));
  thetisBox.show("CENTER", "", "TREE", "<%= url_for(:controller => 'groups', :action => 'move') %>", "<%= t('group.select_dest')%>", "");
  thetisBox.setTree("<%= url_for(:controller => 'groups', :action => 'ajax_get_tree') %>?id="+group_id, "0");
}

function doGetUsers(group_id)
{
  var addParams = new Array();
  addParams.push("id="+group_id);
  addParams.push(Form.serialize(document.form_group_tree));

  doUpdateView("get", "<%= url_for(:controller => 'groups', :action => 'get_users') %>", addParams);
}

function doGetGroupsOrder(group_id)
{
  var addParams = new Array();
  addParams.push("id="+group_id);
  addParams.push(Form.serialize(document.form_group_tree));

  doUpdateView("get", "<%= url_for(:controller => 'groups', :action => 'get_groups_order') %>", addParams);
}

function doGetOfficialTitles(group_id)
{
  var addParams = new Array();
  addParams.push("id="+group_id);
  addParams.push(Form.serialize(document.form_group_tree));

  doUpdateView("get", "<%= url_for(:controller => 'groups', :action => 'get_official_titles') %>", addParams);
}

function doGetWorkflows(group_id)
{
  var addParams = new Array();
  addParams.push("id="+group_id);
  addParams.push(Form.serialize(document.form_group_tree));

  doUpdateView("get", "<%= url_for(:controller => 'groups', :action => 'get_workflows') %>", addParams);
}

function doGetMaps(group_id)
{
  var addParams = new Array();
  addParams.push("id="+group_id);
  addParams.push(Form.serialize(document.form_group_tree));

  doUpdateView("get", "<%= url_for(:controller => 'groups', :action => 'get_map') %>", addParams);
}

function selectGroup(group_id)
{
  var select_opt = _z("select_opt");

  if (select_opt == null) {
    doGetUsers(group_id);
  } else {
    switch (_z("select_opt").value)
    {
      case "user": doGetUsers(group_id); break;
      case "groups_order": doGetGroupsOrder(group_id); break;
      case "official_title": doGetOfficialTitles(group_id); break;
      case "workflow": doGetWorkflows(group_id); break;
      case "office_map": doGetMaps(group_id); break;
    }
  }
}

function changeOption(val)
{
  var group_id = document.form_group_tree.selKeeper.value.split(":")[1];
  if (!group_id) {
    return false;
  }

  switch (val) {
    case "user": doGetUsers(group_id); break;
    case "groups_order": doGetGroupsOrder(group_id); break;
    case "official_title": doGetOfficialTitles(group_id); break;
    case "workflow": doGetWorkflows(group_id); break;
    case "office_map": doGetMaps(group_id); break;
  }
}

</script>
